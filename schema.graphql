type Query {
  Gene(name: ID!): [Gene]
  Genes(locus: LocusInput!): [Genes]
  GlobalEnrichment(phenotype: ID!): [GlobalEnrichment]
  Associations(phenotype: ID!, locus: LocusInput!): [Associations]
  TopAssociations(locus: LocusInput!): [TopAssociations]
  AnnotatedRegions(annotation: ID!, locus: LocusInput!): [AnnotatedRegions]
  CredibleSets(phenotype: ID!, locus: LocusInput!): [CredibleSets]
  CredibleVariants(phenotype: ID!, credibleSetId: ID!): [CredibleVariants]
  CredibleRegions(phenotype: ID!, credibleSetId: ID!): [CredibleRegions]
  TranscriptionFactors(varId: ID!): [TranscriptionFactors]
  TranscriptConsequences(varId: ID!): [TranscriptConsequences]
  PhewasAssociations(varId: ID!): [PhewasAssociations]
  DatasetAssociations(dataset: ID!, phenotype: ID!): [DatasetAssociations]
  Variant(varId: ID, dbSNP: ID): [Variant]
  GlobalAssociations(phenotype: ID!): [GlobalAssociations]
  GeneAssociations(gene: ID!): [GeneAssociations]
  VariantDatasetAssociations(varId: ID!): [VariantDatasetAssociations]
  GeneAssociations52k(gene: ID!): [GeneAssociations52k]
  GeneFinder(phenotype: ID!): [GeneFinder]
  Burden(gene: ID!, burdenBinId: ID!): [Burden]
  GeneVariants(gene: ID!): [GeneVariants]
  ClumpedVariants(phenotype: ID!, clump: ID!): [ClumpedVariants]
  ClumpedMatrix(leadPhenotype: ID!, phenotype: ID!): [ClumpedMatrix]
  TissueRegions(tissue: ID!, locus: LocusInput!): [TissueRegions]
  Regions(locus: LocusInput!): [Regions]
}

type Gene {
  end: Int
  source: String
  type: String
  start: Int
  name: String
  chromosome: String
}

type Genes {
  end: Int
  source: String
  type: String
  start: Int
  name: String
  chromosome: String
}

input LocusInput {
  gene: String
  chromosome: String
  position: Int
  start: Int
  end: Int
}

type GlobalEnrichment {
  expectedSNPs: Float
  ancestry: String
  phenotype: String
  tissue: String
  pValue: Float
  annotation: String
  SNPs: Int
}

type Associations {
  position: Int
  reference: String
  consequence: String
  nearest: [String]
  varId: String
  zScore: Float
  n: Float
  phenotype: String
  alt: String
  pValue: Float
  dbSNP: String
  chromosome: String
  maf: Float
  stdErr: Float
  beta: Float
}

type TopAssociations {
  reference: String
  phenotype: String
  alt: String
  maf: Float
  position: Int
  clump: Int
  consequence: String
  nearest: [String]
  zScore: Float
  dbSNP: String
  stdErr: String
  alignment: Float
  clumpEnd: Int
  varId: String
  beta: Float
  clumpStart: Int
  n: Float
  pValue: Float
  chromosome: String
  leadSNP: Boolean
}

type AnnotatedRegions {
  end: Int
  start: Int
  tissue: String
  annotation: String
  chromosome: String
}

type CredibleSets {
  credibleSetId: String
  end: Int
  phenotype: String
  start: Int
  chromosome: String
  dataset: String
}

type CredibleVariants {
  credibleSetId: String
  position: Int
  reference: String
  ancestry: String
  varId: String
  phenotype: String
  alt: String
  pValue: Float
  chromosome: String
  eaf: Float
  dataset: String
  maf: Float
  multiAllelic: Boolean
  stdErr: Float
  posteriorProbability: Float
}

type CredibleRegions {
  credibleSetId: String
  end: Int
  method: String
  predictedTargetGene: String
  phenotype: String
  start: Int
  tissue: String
  tissueId: String
  annotation: String
  chromosome: String
  dataset: String
  targetEnd: Int
  targetStart: Int
}

type TranscriptionFactors {
  delta: Float
  refScore: Float
  altScore: Float
  positionWeightMatrix: String
  varId: String
  dbSNP: String
  strand: String
}

type TranscriptConsequences {
  polyphenScore: Float
  proveanPred: String
  ccds: String
  metasvmPred: String
  mCapScore: Float
  cdsStart: Int
  distance: Int
  fathmmPred: String
  hgncId: Int
  lrtPred: String
  siftScore: Float
  strand: Int
  dannRankscore: Float
  cdsEnd: Int
  siftPred: String
  siftPrediction: String
  variantAllele: String
  vestRankscore: Float
  polyphenPrediction: String
  varId: String
  proteinStart: Int
  proteinEnd: Int
  vestScore: String
  geneSymbol: String
  cdnaEnd: Int
  fathmmMklCodingPred: String
  consequenceTerms: [String]
  geneSymbolSource: String
  transcriptId: String
  gnomadGenomesPopmaxAf: Float
  codons: String
  biotype: String
  eigenPcRawCodingRankscore: Float
  metalrPred: String
  polyphenHvarPred: String
  impact: String
  polyphenHdivPred: String
  pick: Int
  aminoAcids: String
  cdnaStart: Int
  mutationtasterPred: String
  flags: [String]
  geneId: String
  caddRawRankscore: Float
}

type PhewasAssociations {
  position: Int
  varId: String
  phenotype: String
  n: Float
  pValue: Float
  chromosome: String
  stdErr: String
  beta: Float
}

type DatasetAssociations {
  position: Int
  reference: String
  consequence: String
  nearest: [String]
  ancestry: String
  varId: String
  zScore: Float
  n: Int
  oddsRatio: Float
  alt: String
  phenotype: String
  pValue: Float
  dbSNP: String
  chromosome: String
  dataset: String
  multiAllelic: Boolean
  stdErr: Float
  beta: Float
}

type Variant {
  consequence: String
  nearest: [String]
  varId: String
  dbSNP: String
  maf: Float
}

type GlobalAssociations {
  reference: String
  phenotype: String
  alt: String
  maf: Float
  position: Int
  clump: Int
  consequence: String
  nearest: [String]
  zScore: Float
  dbSNP: String
  stdErr: String
  clumpEnd: Int
  varId: String
  beta: Float
  clumpStart: Int
  n: Float
  pValue: Float
  chromosome: String
  leadSNP: Boolean
}

type GeneAssociations {
  end: Int
  subjects: Int
  nParam: Int
  zStat: Float
  type: String
  phenotype: String
  start: Int
  pValue: Float
  chromosome: String
  gene: String
}

type VariantDatasetAssociations {
  varId: String
  phenotype: String
  n: Float
  pValue: Float
  dataset: String
  beta: Float
}

type GeneAssociations52k {
  phenotype: String
  pValue: Float
  dataset: String
  gene: String
  beta: Float
  masks: [GeneAssociations52kMasks]
}

type GeneAssociations52kMasks {
  n: Int
  stdErr: Float
  pValue: Float
  mask: String
  combinedAF: Float
  passingVariants: Int
  singleVariants: Int
  beta: Float
}

type GeneFinder {
  end: Int
  subjects: Int
  nParam: Int
  zStat: Float
  type: String
  phenotype: String
  start: Int
  pValue: Float
  chromosome: String
  gene: String
}

type Burden {
  proveanPred: String
  mCapScore: Float
  metasvmPred: String
  gene: String
  maf: Float
  transcriptId: String
  fathmmPred: String
  lrtPred: String
  eigenPcRawCodingRankscore: Float
  dannRankscore: Float
  siftPred: String
  vestRankscore: Float
  varId: String
  caddRawRankscore: Float
  fathmmMklCodingPred: String
  gnomadGenomesPopmaxAf: Float
  polyphenHvarPred: String
  metalrPred: String
  impact: String
  polyphenHdivPred: String
  pick: Int
  lof: String
  mutationtasterPred: String
  burdenBinId: String
}

type GeneVariants {
  reference: String
  alleleCount: Int
  start: Int
  phenotype: String
  alt: String
  gene: String
  maf: Float
  position: Int
  source: String
  consequence: String
  heterozygousCases: Int
  nearest: [String]
  homozygousCases: Int
  type: String
  alleleCountControls: Int
  dbSNP: String
  alleleCountCases: Int
  multiAllelic: Boolean
  end: Int
  homozygousControls: Int
  varId: String
  ancestry: String
  heterozygousControls: Int
  chromosome: String
  dataset: String
}

type ClumpedVariants {
  reference: String
  phenotype: String
  alt: String
  maf: Float
  position: Int
  clump: Int
  consequence: String
  nearest: [String]
  zScore: Float
  dbSNP: String
  stdErr: String
  clumpEnd: Int
  varId: String
  beta: Float
  clumpStart: Int
  n: Float
  pValue: Float
  chromosome: String
  leadSNP: Boolean
}

type ClumpedMatrix {
  position: Int
  reference: String
  leadPhenotype: String
  clump: Int
  consequence: String
  nearest: [String]
  varId: String
  zScore: Float
  n: Float
  phenotype: String
  alt: String
  pValue: Float
  dbSNP: String
  chromosome: String
  maf: Float
  stdErr: String
  beta: Float
}

type TissueRegions {
  end: Int
  start: Int
  tissue: String
  annotation: String
  chromosome: String
}

type Regions {
  end: Int
  start: Int
  tissue: String
  annotation: String
  chromosome: String
}


type Query {
  Gene(name: ID): [Gene]
  Genes(locus: LocusInput): [Genes]
  GlobalEnrichment(phenotype: ID): [GlobalEnrichment]
  Associations(phenotype: ID, locus: LocusInput): [Associations]
  TopAssociations(locus: LocusInput): [TopAssociations]
  AnnotatedRegions(annotation: ID, locus: LocusInput): [AnnotatedRegions]
  CredibleSets(phenotype: ID, locus: LocusInput): [CredibleSets]
  CredibleVariants(phenotype: ID, credibleSetId: ID): [CredibleVariants]
  CredibleRegions(phenotype: ID, credibleSetId: ID): [CredibleRegions]
  TranscriptionFactors(varId: ID): [TranscriptionFactors]
  TranscriptConsequences(varId: ID): [TranscriptConsequences]
  PhewasAssociations(varId: ID): [PhewasAssociations]
  DatasetAssociations(dataset: ID, phenotype: ID): [DatasetAssociations]
  Variant(varId: ID, dbSNP: ID): [Variant]
  GlobalAssociations(phenotype: ID): [GlobalAssociations]
  GeneAssociations(gene: ID): [GeneAssociations]
  VariantDatasetAssociations(varId: ID): [VariantDatasetAssociations]
  GeneAssociations52k(gene: ID): [GeneAssociations52k]
  GeneFinder(phenotype: ID): [GeneFinder]
  Burden(gene: ID, burdenBinId: ID): [Burden]
  GeneVariants(gene: ID): [GeneVariants]
  ClumpedVariants(phenotype: ID, clump: ID): [ClumpedVariants]
  ClumpedMatrix(leadPhenotype: ID, phenotype: ID): [ClumpedMatrix]
  TissueRegions(tissue: ID, locus: LocusInput): [TissueRegions]
  Regions(locus: LocusInput): [Regions]
}

type Gene {
  end: Int
  start: Int
  source: String
  name: String
  type: String
  chromosome: String
}

type Genes {
  end: Int
  start: Int
  source: String
  name: String
  type: String
  chromosome: String
}

input LocusInput {
  gene: String
  chromosome: String
  position: Int
  start: Int
  end: Int
}

type GlobalEnrichment {
  SNPs: Int
  expectedSNPs: Float
  annotation: String
  phenotype: String
  pValue: Float
  tissue: String
  ancestry: String
}

type Associations {
  consequence: String
  position: Int
  n: Float
  alt: String
  reference: String
  phenotype: String
  dbSNP: String
  beta: Float
  zScore: Float
  pValue: Float
  stdErr: Float
  varId: String
  maf: Float
  nearest: [String]
  chromosome: String
}

type TopAssociations {
  n: Float
  zScore: Float
  alignment: Float
  position: Int
  reference: String
  phenotype: String
  beta: Float
  pValue: Float
  stdErr: String
  clump: Int
  consequence: String
  nearest: [String]
  leadSNP: Boolean
  clumpEnd: Int
  alt: String
  dbSNP: String
  varId: String
  maf: Float
  clumpStart: Int
  chromosome: String
}

type AnnotatedRegions {
  end: Int
  annotation: String
  start: Int
  tissue: String
  chromosome: String
}

type CredibleSets {
  end: Int
  dataset: String
  start: Int
  phenotype: String
  credibleSetId: String
  chromosome: String
}

type CredibleVariants {
  dataset: String
  position: Int
  eaf: Float
  alt: String
  multiAllelic: Boolean
  phenotype: String
  reference: String
  pValue: Float
  stdErr: Float
  maf: Float
  posteriorProbability: Float
  varId: String
  credibleSetId: String
  chromosome: String
  ancestry: String
}

type CredibleRegions {
  end: Int
  dataset: String
  tissue: String
  annotation: String
  start: Int
  tissueId: String
  targetStart: Int
  phenotype: String
  predictedTargetGene: String
  targetEnd: Int
  credibleSetId: String
  chromosome: String
  method: String
}

type TranscriptionFactors {
  altScore: Float
  strand: String
  refScore: Float
  delta: Float
  dbSNP: String
  varId: String
  positionWeightMatrix: String
}

type TranscriptConsequences {
  siftScore: Float
  strand: Int
  hgncId: Int
  fathmmMklCodingPred: String
  codons: String
  geneId: String
  impact: String
  fathmmPred: String
  proveanPred: String
  vestScore: String
  eigenPcRawCodingRankscore: Float
  biotype: String
  mutationtasterPred: String
  polyphenScore: Float
  siftPred: String
  caddRawRankscore: Float
  variantAllele: String
  flags: [String]
  polyphenPrediction: String
  gnomadGenomesPopmaxAf: Float
  proteinEnd: Int
  siftPrediction: String
  proteinStart: Int
  geneSymbol: String
  distance: Int
  cdsEnd: Int
  metasvmPred: String
  cdsStart: Int
  vestRankscore: Float
  pick: Int
  transcriptId: String
  lrtPred: String
  dannRankscore: Float
  aminoAcids: String
  mCapScore: Float
  metalrPred: String
  geneSymbolSource: String
  cdnaEnd: Int
  cdnaStart: Int
  polyphenHvarPred: String
  polyphenHdivPred: String
  ccds: String
  varId: String
  consequenceTerms: [String]
}

type PhewasAssociations {
  position: Int
  n: Float
  phenotype: String
  beta: Float
  pValue: Float
  stdErr: String
  varId: String
  chromosome: String
}

type DatasetAssociations {
  dataset: String
  consequence: String
  position: Int
  n: Int
  alt: String
  multiAllelic: Boolean
  phenotype: String
  reference: String
  beta: Float
  zScore: Float
  pValue: Float
  stdErr: Float
  varId: String
  dbSNP: String
  nearest: [String]
  oddsRatio: Float
  chromosome: String
  ancestry: String
}

type Variant {
  consequence: String
  dbSNP: String
  maf: Float
  varId: String
  nearest: [String]
}

type GlobalAssociations {
  n: Float
  zScore: Float
  position: Int
  reference: String
  phenotype: String
  beta: Float
  pValue: Float
  stdErr: String
  clump: Int
  consequence: String
  nearest: [String]
  leadSNP: Boolean
  clumpEnd: Int
  alt: String
  dbSNP: String
  varId: String
  maf: Float
  clumpStart: Int
  chromosome: String
}

type GeneAssociations {
  nParam: Int
  end: Int
  start: Int
  gene: String
  phenotype: String
  subjects: Int
  pValue: Float
  type: String
  chromosome: String
  zStat: Float
}

type VariantDatasetAssociations {
  dataset: String
  n: Float
  phenotype: String
  beta: Float
  pValue: Float
  varId: String
}

type GeneAssociations52k {
  dataset: String
  masks: [GeneAssociations52kMasks]
  gene: String
  phenotype: String
  beta: Float
  pValue: Float
}

type GeneAssociations52kMasks {
  passingVariants: Int
  combinedAF: Float
  n: Int
  mask: String
  beta: Float
  pValue: Float
  singleVariants: Int
  stdErr: Float
}

type GeneFinder {
  nParam: Int
  end: Int
  start: Int
  gene: String
  phenotype: String
  subjects: Int
  pValue: Float
  type: String
  chromosome: String
  zStat: Float
}

type Burden {
  impact: String
  fathmmPred: String
  mutationtasterPred: String
  siftPred: String
  caddRawRankscore: Float
  eigenPcRawCodingRankscore: Float
  gnomadGenomesPopmaxAf: Float
  lof: String
  vestRankscore: Float
  metasvmPred: String
  mCapScore: Float
  pick: Int
  lrtPred: String
  transcriptId: String
  dannRankscore: Float
  burdenBinId: String
  metalrPred: String
  gene: String
  polyphenHvarPred: String
  polyphenHdivPred: String
  maf: Float
  varId: String
  fathmmMklCodingPred: String
  proveanPred: String
}

type GeneVariants {
  homozygousCases: Int
  heterozygousCases: Int
  type: String
  position: Int
  heterozygousControls: Int
  reference: String
  phenotype: String
  ancestry: String
  source: String
  homozygousControls: Int
  consequence: String
  start: Int
  alleleCountControls: Int
  nearest: [String]
  end: Int
  dataset: String
  gene: String
  alt: String
  multiAllelic: Boolean
  dbSNP: String
  varId: String
  alleleCount: Int
  maf: Float
  chromosome: String
  alleleCountCases: Int
}

type ClumpedVariants {
  n: Float
  zScore: Float
  position: Int
  reference: String
  phenotype: String
  beta: Float
  pValue: Float
  stdErr: String
  clump: Int
  consequence: String
  nearest: [String]
  leadSNP: Boolean
  clumpEnd: Int
  alt: String
  dbSNP: String
  varId: String
  maf: Float
  clumpStart: Int
  chromosome: String
}

type ClumpedMatrix {
  clump: Int
  consequence: String
  position: Int
  n: Float
  alt: String
  reference: String
  leadPhenotype: String
  phenotype: String
  beta: Float
  zScore: Float
  pValue: Float
  stdErr: String
  varId: String
  dbSNP: String
  maf: Float
  nearest: [String]
  chromosome: String
}

type TissueRegions {
  end: Int
  annotation: String
  start: Int
  tissue: String
  chromosome: String
}

type Regions {
  end: Int
  annotation: String
  start: Int
  tissue: String
  chromosome: String
}

